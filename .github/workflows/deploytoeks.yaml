name: Build and Deploy to EKS

on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  EKS_CLUSTER: ${{ vars.EKS_CLUSTER }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    name: Build, Push to ECR, and Deploy to EKS
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Push Docker image to ECR
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER

    - name: Install Ingress controller
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0-beta.0/deploy/static/provider/aws/deploy.yaml

    - name: Patch Ingress service for NLB
      run: |
        echo "Patching ingress-nginx-controller service to use externalTrafficPolicy: Local"
        kubectl patch svc ingress-nginx-controller -n ingress-nginx -p '{"spec":{"externalTrafficPolicy":"Local"}}'

    - name: Wait for Ingress controller to be ready
      run: |
        echo "Waiting for ingress-nginx-controller deployment to be ready..."
        kubectl rollout status deployment ingress-nginx-controller -n ingress-nginx --timeout=180s

        echo "Checking admission webhook service..."
        for i in {1..10}; do
          READY=$(kubectl get endpoints ingress-nginx-controller-admission -n ingress-nginx -o jsonpath='{.subsets[*].addresses[*].ip}')
          if [ -n "$READY" ]; then
            echo "Admission controller is ready"
            break
          fi
          echo "Waiting for admission controller... ($i)"
          sleep 10
        done

    - name: Deploy to EKS
      run: |
        kubectl apply -f k8s/appointment-deployment.yaml
        kubectl apply -f k8s/patient-deployment.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Verify Ingress and Print URL
      run: |
        echo "Waiting for Ingress hostname and health..."
        for i in {1..20}; do
          HOSTNAME=$(kubectl get ingress healthcare-ingress -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          if [ -n "$HOSTNAME" ]; then
            echo "Found hostname: $HOSTNAME"
            CODE1=$(curl -s -o /dev/null -w "%{http_code}" http://$HOSTNAME/appointments)
            CODE2=$(curl -s -o /dev/null -w "%{http_code}" http://$HOSTNAME/patients)
            if [[ "$CODE1" == "200" || "$CODE1" == "404" || "$CODE1" == "403" ]]; then
              echo "Ingress is up and routing traffic."
              echo "Ingress URL: http://$HOSTNAME"
              break
            fi
          fi
          echo "Waiting for valid ingress response... ($i)"
          sleep 15
        done
