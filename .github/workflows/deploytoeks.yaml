name: Build and Deploy to EKS

on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  EKS_CLUSTER: ${{ vars.EKS_CLUSTER }}
  IMAGE_TAG: ${{ github.sha }}
  AWS_ACCOUNT_ID: 794038216301

jobs:
  deploy:
    name: Build, Push to ECR, and Deploy to EKS
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Docker Image
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER

    - name: Install eksctl and jq
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        sudo apt-get update && sudo apt-get install -y jq

    - name: Download AWS Load Balancer IAM policy
      run: |
        curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.11.0/docs/install/iam_policy.json

    - name: Create IAM policy if it doesn't exist
      run: |
        POLICY_EXISTS=$(aws iam list-policies --query "Policies[?PolicyName=='AWSLoadBalancerControllerIAMPolicy'].Arn" --output text)
        if [ -z "$POLICY_EXISTS" ]; then
          echo "Creating IAM policy..."
          aws iam create-policy \
            --policy-name AWSLoadBalancerControllerIAMPolicy \
            --policy-document file://iam_policy.json
        else
          echo "IAM policy already exists: $POLICY_EXISTS"
        fi

    - name: Create IAM role and Kubernetes service account
      run: |
        eksctl create iamserviceaccount \
          --cluster=$EKS_CLUSTER \
          --region=$AWS_REGION \
          --namespace=kube-system \
          --name=aws-load-balancer-controller \
          --role-name AmazonEKSLoadBalancerControllerRole \
          --attach-policy-arn=arn:aws:iam::$AWS_ACCOUNT_ID:policy/AWSLoadBalancerControllerIAMPolicy \
          --approve

    - name: Add AWS EKS Helm repo
      run: |
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update

    - name: Install AWS Load Balancer Controller via Helm
      run: |
        VPC_ID=$(aws eks describe-cluster \
          --name $EKS_CLUSTER \
          --region $AWS_REGION \
          --query "cluster.resourcesVpcConfig.vpcId" \
          --output text)

        helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
          -n kube-system \
          --set clusterName=$EKS_CLUSTER \
          --set serviceAccount.create=false \
          --set serviceAccount.name=aws-load-balancer-controller \
          --set region=$AWS_REGION \
          --set vpcId=$VPC_ID

    - name: Wait for ALB Controller to be ready
      run: |
        kubectl rollout status deployment/aws-load-balancer-controller -n kube-system

    - name: Deploy unified Deployment and Service
      run: |
        sed "s|<IMAGE_TAG>|$IMAGE_TAG|g" k8s/healthcaredeployment.yaml | kubectl apply -f -


    - name: Apply Ingress Resource
      run: |
        kubectl apply -f k8s/ingress.yaml

    - name: Verify Ingress and Print URL
      run: |
        echo "Waiting for Ingress hostname and health..."
        for i in {1..20}; do
          HOSTNAME=$(kubectl get ingress healthcare-ingress -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          if [ -n "$HOSTNAME" ]; then
            echo "Ingress available at: http://$HOSTNAME"
            curl -s http://$HOSTNAME/health || true
            curl -s http://$HOSTNAME/appointments || true
            curl -s http://$HOSTNAME/patients || true
            break
          fi
          echo "Waiting for valid ingress response... ($i)"
          sleep 15
        done
